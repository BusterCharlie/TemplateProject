# GitHub Copilot Instructions

This project follows specific coding standards and patterns. Please adhere to these guidelines when providing suggestions.

## Coding Standards

### Python Code Style
- **Line Length**: Maximum 88 characters (Black formatter standard)
- **Indentation**: 4 spaces (no tabs)
- **Naming Conventions**:
  - `snake_case` for functions and variables
  - `PascalCase` for classes
  - `UPPER_CASE` for constants
- **Type Hints**: Required for all function parameters and return values
- **Docstrings**: Google style for all functions and classes

### Code Organization
- Break code into smaller, maintainable functions/classes
- Reuse existing functionality instead of recreating
- Use VSCode region markers for code organization:
  ```python
  # region: Description
  # Code here
  # endregion
  ```

### Documentation
- Document **WHY** you're doing something, not just what
- Include type hints for better IDE support
- Use descriptive variable and function names

### Error Handling
- Implement input validation for all user inputs
- Use defensive programming practices
- Handle edge cases gracefully
- Prefer specific exceptions over generic ones

### Logging
- Use structured logging instead of print statements
- Include appropriate log levels (DEBUG, INFO, WARNING, ERROR)
- Use module-based logger names

### Project Structure
- Keep source code in `src/{{ package_name }}/`
- Use `dev/` folder for temporary and testing files
- Follow the established package structure

### Best Practices
- Unicode/emoji support: Set `$env:PYTHONUTF8="1"` in PowerShell scripts
- Validate inputs before processing
- Use context managers for resource management
- Follow DRY (Don't Repeat Yourself) principles

### GUI Development (if applicable)
- Use ttkbootstrap for consistent theming
- Implement proper event handling
- Separate business logic from UI logic
- Support both light and dark themes

## Project-Specific Guidelines

### Configuration Management
- Store user settings in `config.json` (excluded from git)
- Use environment variables for sensitive data
- Provide sensible defaults for all configuration options

### Testing
- Write tests for all new functionality
- Use the `dev/` folder for test files during development
- Follow pytest conventions

### Git Workflow
- Write clear, descriptive commit messages
- Keep commits atomic and focused
- Use conventional commit format when possible

## Example Code Patterns

### Function with proper typing and documentation:
```python
def process_data(input_data: List[str], max_items: int = 100) -> Dict[str, Any]:
    """Process input data and return structured results.

    Args:
        input_data: List of strings to process
        max_items: Maximum number of items to process

    Returns:
        Dictionary containing processed results

    Raises:
        ValueError: If input_data is empty or max_items is negative
    """
    # region: Input validation
    if not input_data:
        raise ValueError("Input data cannot be empty")
    if max_items < 0:
        raise ValueError("max_items must be non-negative")
    # endregion

    # Processing logic here...
    return results
```

### Logging setup:
```python
import logging

logger = logging.getLogger(__name__)

def example_function() -> None:
    """Example function with proper logging."""
    logger.info("Starting process")
    try:
        # Process logic
        logger.debug("Processing completed successfully")
    except Exception as e:
        logger.error(f"Process failed: {e}")
        raise
```

Remember: Focus on writing maintainable, well-documented code that follows these established patterns.
